{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useContext, useEffect } from 'react';\nimport { CartContext } from '../context/CartContext';\nimport './Products.css';\nimport { createClient } from '@supabase/supabase-js';\n\n// Initialize Supabase client\nconst supabaseUrl = 'https://cslnkpnxwqahipwrjqna.supabase.co';\nconst supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNzbG5rcG54d3FhaGlwd3JqcW5hIiwicm9sZSI6ImFub24iLCJpYXQiOjE3Mzk2MzAxNDksImV4cCI6MjA1NTIwNjE0OX0.jqJ9wbyVFx09RvlNXnLZipCzFvjY2RTfcbO4XoiTfU8';\nconst supabase = createClient(supabaseUrl, supabaseKey);\nconst Products = () => {\n  _s();\n  const {\n    addToCart\n  } = useContext(CartContext);\n  const [search, setSearch] = useState('');\n  const [category, setCategory] = useState('All');\n  const [selectedProduct, setSelectedProduct] = useState(null);\n  const [quantity, setQuantity] = useState(1);\n  const [sortOption, setSortOption] = useState('default');\n  const [productsList, setProductsList] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Fetch products from Supabase\n  useEffect(() => {\n    const fetchProducts = async () => {\n      try {\n        setLoading(true);\n        const {\n          data,\n          error\n        } = await supabase.from('products').select('*').gt('quantity', 0); // Only fetch products with quantity > 0\n\n        if (error) throw error;\n        setProductsList(data);\n      } catch (err) {\n        setError(err.message);\n        console.error('Error fetching products:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchProducts();\n\n    // Set up real-time subscription\n    const channel = supabase.channel('products-changes').on('postgres_changes', {\n      event: '*',\n      schema: 'public',\n      table: 'products'\n    }, payload => {\n      if (payload.eventType === 'UPDATE') {\n        setProductsList(prev => prev.map(p => p.id === payload.new.id ? payload.new : p));\n      }\n    }).subscribe();\n    return () => {\n      supabase.removeChannel(channel);\n    };\n  }, []);\n  const handleAddToCart = async product => {\n    try {\n      // Validate available quantity\n      if (quantity > product.quantity) {\n        alert(`Only ${product.quantity} items available in stock`);\n        return;\n      }\n\n      // Optimistically update local state first for better UX\n      const updatedProducts = productsList.map(p => p.id === product.id ? {\n        ...p,\n        quantity: p.quantity - quantity\n      } : p);\n      setProductsList(updatedProducts);\n\n      // Update quantity in Supabase\n      const {\n        error: updateError\n      } = await supabase.from('products').update({\n        quantity: product.quantity - quantity\n      }).eq('id', product.id);\n      if (updateError) throw updateError;\n\n      // Add to cart\n      addToCart({\n        ...product,\n        quantity: quantity\n      });\n\n      // Close modal and reset quantity\n      setSelectedProduct(null);\n      setQuantity(1);\n    } catch (err) {\n      console.error('Error updating product quantity:', err);\n      // Revert local state if Supabase update fails\n      setProductsList(productsList);\n      alert('Failed to update product quantity. Please try again.');\n    }\n  };\n};\n_s(Products, \"KERk0QjVzpKOWaeXdFd6jsDqn1E=\");\n_c = Products;\nexport default Products;\nvar _c;\n$RefreshReg$(_c, \"Products\");","map":{"version":3,"names":["React","useState","useContext","useEffect","CartContext","createClient","supabaseUrl","supabaseKey","supabase","Products","_s","addToCart","search","setSearch","category","setCategory","selectedProduct","setSelectedProduct","quantity","setQuantity","sortOption","setSortOption","productsList","setProductsList","loading","setLoading","error","setError","fetchProducts","data","from","select","gt","err","message","console","channel","on","event","schema","table","payload","eventType","prev","map","p","id","new","subscribe","removeChannel","handleAddToCart","product","alert","updatedProducts","updateError","update","eq","_c","$RefreshReg$"],"sources":["D:/PROJECTS/new consultancy project/velava-super-stores/src/components/Products.js"],"sourcesContent":["import React, { useState, useContext, useEffect } from 'react';\r\nimport { CartContext } from '../context/CartContext';\r\nimport './Products.css';\r\nimport { createClient } from '@supabase/supabase-js';\r\n\r\n// Initialize Supabase client\r\nconst supabaseUrl = 'https://cslnkpnxwqahipwrjqna.supabase.co';\r\nconst supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNzbG5rcG54d3FhaGlwd3JqcW5hIiwicm9sZSI6ImFub24iLCJpYXQiOjE3Mzk2MzAxNDksImV4cCI6MjA1NTIwNjE0OX0.jqJ9wbyVFx09RvlNXnLZipCzFvjY2RTfcbO4XoiTfU8';\r\nconst supabase = createClient(supabaseUrl, supabaseKey);\r\n\r\nconst Products = () => {\r\n  const { addToCart } = useContext(CartContext);\r\n  const [search, setSearch] = useState('');\r\n  const [category, setCategory] = useState('All');\r\n  const [selectedProduct, setSelectedProduct] = useState(null);\r\n  const [quantity, setQuantity] = useState(1);\r\n  const [sortOption, setSortOption] = useState('default');\r\n  const [productsList, setProductsList] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Fetch products from Supabase\r\n  useEffect(() => {\r\n    const fetchProducts = async () => {\r\n      try {\r\n        setLoading(true);\r\n        const { data, error } = await supabase\r\n          .from('products')\r\n          .select('*')\r\n          .gt('quantity', 0); // Only fetch products with quantity > 0\r\n        \r\n        if (error) throw error;\r\n        \r\n        setProductsList(data);\r\n      } catch (err) {\r\n        setError(err.message);\r\n        console.error('Error fetching products:', err);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchProducts();\r\n\r\n    // Set up real-time subscription\r\n    const channel = supabase\r\n      .channel('products-changes')\r\n      .on('postgres_changes', {\r\n        event: '*',\r\n        schema: 'public',\r\n        table: 'products'\r\n      }, (payload) => {\r\n        if (payload.eventType === 'UPDATE') {\r\n          setProductsList(prev => \r\n            prev.map(p => p.id === payload.new.id ? payload.new : p)\r\n          );\r\n        }\r\n      })\r\n      .subscribe();\r\n\r\n    return () => {\r\n      supabase.removeChannel(channel);\r\n    };\r\n  }, []);\r\n\r\n  const handleAddToCart = async (product) => {\r\n    try {\r\n      // Validate available quantity\r\n      if (quantity > product.quantity) {\r\n        alert(`Only ${product.quantity} items available in stock`);\r\n        return;\r\n      }\r\n\r\n      // Optimistically update local state first for better UX\r\n      const updatedProducts = productsList.map(p => \r\n        p.id === product.id ? { ...p, quantity: p.quantity - quantity } : p\r\n      );\r\n      setProductsList(updatedProducts);\r\n\r\n      // Update quantity in Supabase\r\n      const { error: updateError } = await supabase\r\n        .from('products')\r\n        .update({ quantity: product.quantity - quantity })\r\n        .eq('id', product.id);\r\n      \r\n      if (updateError) throw updateError;\r\n\r\n      // Add to cart\r\n      addToCart({\r\n        ...product,\r\n        quantity: quantity\r\n      });\r\n\r\n      // Close modal and reset quantity\r\n      setSelectedProduct(null);\r\n      setQuantity(1);\r\n\r\n    } catch (err) {\r\n      console.error('Error updating product quantity:', err);\r\n      // Revert local state if Supabase update fails\r\n      setProductsList(productsList);\r\n      alert('Failed to update product quantity. Please try again.');\r\n    }\r\n  };\r\n\r\n};\r\n\r\nexport default Products;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAC9D,SAASC,WAAW,QAAQ,wBAAwB;AACpD,OAAO,gBAAgB;AACvB,SAASC,YAAY,QAAQ,uBAAuB;;AAEpD;AACA,MAAMC,WAAW,GAAG,0CAA0C;AAC9D,MAAMC,WAAW,GAAG,kNAAkN;AACtO,MAAMC,QAAQ,GAAGH,YAAY,CAACC,WAAW,EAAEC,WAAW,CAAC;AAEvD,MAAME,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM;IAAEC;EAAU,CAAC,GAAGT,UAAU,CAACE,WAAW,CAAC;EAC7C,MAAM,CAACQ,MAAM,EAAEC,SAAS,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACa,QAAQ,EAAEC,WAAW,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACe,eAAe,EAAEC,kBAAkB,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EAC5D,MAAM,CAACiB,QAAQ,EAAEC,WAAW,CAAC,GAAGlB,QAAQ,CAAC,CAAC,CAAC;EAC3C,MAAM,CAACmB,UAAU,EAAEC,aAAa,CAAC,GAAGpB,QAAQ,CAAC,SAAS,CAAC;EACvD,MAAM,CAACqB,YAAY,EAAEC,eAAe,CAAC,GAAGtB,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACuB,OAAO,EAAEC,UAAU,CAAC,GAAGxB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACyB,KAAK,EAAEC,QAAQ,CAAC,GAAG1B,QAAQ,CAAC,IAAI,CAAC;;EAExC;EACAE,SAAS,CAAC,MAAM;IACd,MAAMyB,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC,IAAI;QACFH,UAAU,CAAC,IAAI,CAAC;QAChB,MAAM;UAAEI,IAAI;UAAEH;QAAM,CAAC,GAAG,MAAMlB,QAAQ,CACnCsB,IAAI,CAAC,UAAU,CAAC,CAChBC,MAAM,CAAC,GAAG,CAAC,CACXC,EAAE,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC,CAAC;;QAEtB,IAAIN,KAAK,EAAE,MAAMA,KAAK;QAEtBH,eAAe,CAACM,IAAI,CAAC;MACvB,CAAC,CAAC,OAAOI,GAAG,EAAE;QACZN,QAAQ,CAACM,GAAG,CAACC,OAAO,CAAC;QACrBC,OAAO,CAACT,KAAK,CAAC,0BAA0B,EAAEO,GAAG,CAAC;MAChD,CAAC,SAAS;QACRR,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDG,aAAa,CAAC,CAAC;;IAEf;IACA,MAAMQ,OAAO,GAAG5B,QAAQ,CACrB4B,OAAO,CAAC,kBAAkB,CAAC,CAC3BC,EAAE,CAAC,kBAAkB,EAAE;MACtBC,KAAK,EAAE,GAAG;MACVC,MAAM,EAAE,QAAQ;MAChBC,KAAK,EAAE;IACT,CAAC,EAAGC,OAAO,IAAK;MACd,IAAIA,OAAO,CAACC,SAAS,KAAK,QAAQ,EAAE;QAClCnB,eAAe,CAACoB,IAAI,IAClBA,IAAI,CAACC,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKL,OAAO,CAACM,GAAG,CAACD,EAAE,GAAGL,OAAO,CAACM,GAAG,GAAGF,CAAC,CACzD,CAAC;MACH;IACF,CAAC,CAAC,CACDG,SAAS,CAAC,CAAC;IAEd,OAAO,MAAM;MACXxC,QAAQ,CAACyC,aAAa,CAACb,OAAO,CAAC;IACjC,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMc,eAAe,GAAG,MAAOC,OAAO,IAAK;IACzC,IAAI;MACF;MACA,IAAIjC,QAAQ,GAAGiC,OAAO,CAACjC,QAAQ,EAAE;QAC/BkC,KAAK,CAAC,QAAQD,OAAO,CAACjC,QAAQ,2BAA2B,CAAC;QAC1D;MACF;;MAEA;MACA,MAAMmC,eAAe,GAAG/B,YAAY,CAACsB,GAAG,CAACC,CAAC,IACxCA,CAAC,CAACC,EAAE,KAAKK,OAAO,CAACL,EAAE,GAAG;QAAE,GAAGD,CAAC;QAAE3B,QAAQ,EAAE2B,CAAC,CAAC3B,QAAQ,GAAGA;MAAS,CAAC,GAAG2B,CACpE,CAAC;MACDtB,eAAe,CAAC8B,eAAe,CAAC;;MAEhC;MACA,MAAM;QAAE3B,KAAK,EAAE4B;MAAY,CAAC,GAAG,MAAM9C,QAAQ,CAC1CsB,IAAI,CAAC,UAAU,CAAC,CAChByB,MAAM,CAAC;QAAErC,QAAQ,EAAEiC,OAAO,CAACjC,QAAQ,GAAGA;MAAS,CAAC,CAAC,CACjDsC,EAAE,CAAC,IAAI,EAAEL,OAAO,CAACL,EAAE,CAAC;MAEvB,IAAIQ,WAAW,EAAE,MAAMA,WAAW;;MAElC;MACA3C,SAAS,CAAC;QACR,GAAGwC,OAAO;QACVjC,QAAQ,EAAEA;MACZ,CAAC,CAAC;;MAEF;MACAD,kBAAkB,CAAC,IAAI,CAAC;MACxBE,WAAW,CAAC,CAAC,CAAC;IAEhB,CAAC,CAAC,OAAOc,GAAG,EAAE;MACZE,OAAO,CAACT,KAAK,CAAC,kCAAkC,EAAEO,GAAG,CAAC;MACtD;MACAV,eAAe,CAACD,YAAY,CAAC;MAC7B8B,KAAK,CAAC,sDAAsD,CAAC;IAC/D;EACF,CAAC;AAEH,CAAC;AAAC1C,EAAA,CA/FID,QAAQ;AAAAgD,EAAA,GAARhD,QAAQ;AAiGd,eAAeA,QAAQ;AAAC,IAAAgD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}